syntax = "proto3";

package polarsignals.share;
option go_package = "github.com/polarsignals/polarsignals/gen/go/share";

import "parca/query/v1alpha1/query.proto";

// Service that exposes APIs for sharing profiles.
service Share {
  // Uploads the profile and returns the link that can be used to access it.
  rpc Upload(UploadRequest) returns (UploadResponse) {}

  // Query performs a profile query
  rpc Query(ProfileRequest) returns (parca.query.v1alpha1.QueryResponse) {}

  // ProfileTypes returns the list of available profile types.
  rpc ProfileTypes(ProfileTypesRequest) returns (parca.query.v1alpha1.ProfileTypesResponse) {}
}

// UploadRequest represents the request with profile bytes and description.
message UploadRequest {
    // pprof bytes of the profile to be uploaded.
    bytes profile       = 1;

    // Description of the profile.
    string description  = 2;
}

// UploadResponse represents the response with the link that can be used to access the profile.
message UploadResponse {
    // id of the uploaded profile.
    string id = 1;

    // link that can be used to access the profile.
    string link = 2;
}

// ProfileRequest represents the request with the id of the profile to be queried.
message ProfileRequest {
    // id of the profile to be queried.
    string id = 1;

    // Type of the profile to be queried.
    optional string profile_type = 2;

    // report_type is the type of report to return
    parca.query.v1alpha1.QueryRequest.ReportType report_type = 3;
}

// ProfileTypesRequest represents the profile types request with the id of the profile to be queried.
message ProfileTypesRequest {
    // id of the profile's types to be queried.
    string id = 1;
}

syntax = "proto3";

package polarsignals.organization;
option go_package = "github.com/polarsignals/polarsignals/gen/go/organization";

import "google/api/annotations.proto";
import "user/user.proto";

service Organizations {
  rpc GetOrganizations(GetOrganizationsRequest) returns (GetOrganizationsResponse) {
    option (google.api.http) = {
      get: "/v1"
    };
  }

  rpc CreateOrganization(CreateOrganizationRequest) returns (CreateOrganizationResponse) {
    option (google.api.http) = {
      post: "/v1"
      body: "*"
    };
  }

  rpc GetOrganization(GetOrganizationRequest) returns (GetOrganizationResponse) {
    option (google.api.http) = {
      get: "/v1/{id}"
    };
  }

  rpc UpdateOrganization(UpdateOrganizationRequest) returns (UpdateOrganizationResponse) {
    option (google.api.http) = {
      patch: "/v1/{id}"
      body: "*"
    };
  }

  rpc DeleteOrganization(DeleteOrganizationRequest) returns (DeleteOrganizationResponse) {
    option (google.api.http) = {
      delete: "/v1/{id}"
    };
  }

  rpc GetOrganizationUsers(GetOrganizationUsersRequest) returns (GetOrganizationUsersResponse) {
    option (google.api.http) = {
      get: "/v1/{id}/users"
    };
  }

  rpc AddOrganizationUser(AddOrganizationUserRequest) returns (AddOrganizationUserResponse) {
    option (google.api.http) = {
      post: "/v1/{id}/users"
      body: "*"
    };
  }

  rpc RemoveOrganizationUser(RemoveOrganizationUserRequest) returns (RemoveOrganizationUserResponse) {
    option (google.api.http) = {
      delete: "/v1/{id}/users"
    };
  }

  rpc IsInviteTokenValid(IsInviteTokenValidRequest) returns (IsInviteTokenValidResponse) {
    option (google.api.http) = {
      post: "/v1/invite-token-validity/{token}"
    };
  }

  rpc AcceptInviteToken(AcceptInviteTokenRequest) returns (AcceptInviteTokenResponse) {
    option (google.api.http) = {
      post: "/v1/accept-invite-token/{token}"
      body: "*"
    };
  }

  rpc GetInviteTokens(GetInviteTokensRequest) returns (GetInviteTokensResponse) {
    option (google.api.http) = {
      get: "/v1/{id}/invite-tokens"
    };
  }
}

message Organization {
  string id = 1;
  string name = 2;
}

message InviteToken {
  string id = 1;
  string organization_id = 2;
  string role = 3;
}

message GetOrganizationsRequest {
}

message GetOrganizationsResponse {
  repeated Organization organizations = 1;
}

message CreateOrganizationRequest {
  string name = 1;
}

message CreateOrganizationResponse {
  string id = 1;
}

message GetOrganizationRequest {
  string id = 1;
}

message GetOrganizationResponse {
  Organization organization = 1;
}

message UpdateOrganizationRequest {
  string id = 1;
  string name = 2;
}

message UpdateOrganizationResponse {
}

message DeleteOrganizationRequest {
  string id = 1;
}

message DeleteOrganizationResponse {
}

message GetOrganizationUsersRequest {
  string id = 1;
}

message GetOrganizationUsersResponse {
  repeated user.User users = 1;
}

message AddOrganizationUserRequest {
  string id = 1;
  string email = 2;
}

message AddOrganizationUserResponse {
}

message RemoveOrganizationUserRequest {
  string id = 1;
  string userId = 2;
}

message RemoveOrganizationUserResponse {
}

message IsInviteTokenValidRequest {
  string token = 1;
}

message IsInviteTokenValidResponse {
  string orgName = 1;
}

message AcceptInviteTokenRequest {
  string token = 1;
}

message AcceptInviteTokenResponse {
}

message GetInviteTokensRequest {
  string id = 1;
}

message GetInviteTokensResponse {
  repeated InviteToken inviteTokens = 1;
}